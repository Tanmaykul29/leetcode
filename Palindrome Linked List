Given the head of a singly linked list, return true if it is a palindrome or false otherwise.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9


CODE:
class Solution {
public:
    ListNode *reverse(ListNode *head)
    {
        if(head==NULL||head->next==NULL)return head;
        ListNode *rest_head=reverse(head->next);
        ListNode *rest_tail=head->next;
        rest_tail->next=head;
        head->next=NULL;
        return rest_head;
    }
    bool isPalindrome(ListNode* head) {
        if(head==NULL)return true;
        ListNode *slow=head,*fast=head;
        while(fast->next!=NULL&&fast->next->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode *rev=reverse(slow->next);
        ListNode *curr=head;
        while(rev!=NULL){
            if(rev->val!=curr->val)
                return false;
            rev=rev->next;
            curr=curr->next;
        }
        return true;
    }
};
